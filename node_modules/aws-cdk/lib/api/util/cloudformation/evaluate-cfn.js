"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.evaluateCfn = void 0;
function evaluateCfn(object, context) {
    const intrinsicFns = {
        'Fn::Join'(separator, args) {
            return evaluate(args).map(evaluate).join(separator);
        },
        'Fn::Split'(separator, args) {
            return evaluate(args).split(separator);
        },
        'Fn::Select'(index, args) {
            return evaluate(args).map(evaluate)[index];
        },
        'Ref'(logicalId) {
            if (logicalId in context) {
                return context[logicalId];
            }
            else {
                throw new Error(`Reference target '${logicalId}' was not found`);
            }
        },
        'Fn::Sub'(template, explicitPlaceholders) {
            const placeholders = explicitPlaceholders
                ? { ...context, ...evaluate(explicitPlaceholders) }
                : context;
            return template.replace(/\${([^}]*)}/g, (_, key) => {
                if (key in placeholders) {
                    return placeholders[key];
                }
                else {
                    throw new Error(`Fn::Sub target '${key}' was not found`);
                }
            });
        },
    };
    return evaluate(object);
    function evaluate(obj) {
        if (Array.isArray(obj)) {
            return obj.map(evaluate);
        }
        if (typeof obj === 'object') {
            const intrinsic = parseIntrinsic(obj);
            if (intrinsic) {
                return evaluateIntrinsic(intrinsic);
            }
            const ret = {};
            for (const key of Object.keys(obj)) {
                ret[key] = evaluate(obj[key]);
            }
            return ret;
        }
        return obj;
    }
    function evaluateIntrinsic(intrinsic) {
        if (!(intrinsic.name in intrinsicFns)) {
            throw new Error(`Intrinsic ${intrinsic.name} not supported here`);
        }
        const argsAsArray = Array.isArray(intrinsic.args) ? intrinsic.args : [intrinsic.args];
        return intrinsicFns[intrinsic.name].apply(intrinsicFns, argsAsArray);
    }
}
exports.evaluateCfn = evaluateCfn;
function parseIntrinsic(x) {
    if (typeof x !== 'object' || x === null) {
        return undefined;
    }
    const keys = Object.keys(x);
    if (keys.length === 1 && (keys[0].startsWith('Fn::') || keys[0] === 'Ref')) {
        return {
            name: keys[0],
            args: x[keys[0]],
        };
    }
    return undefined;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZhbHVhdGUtY2ZuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZXZhbHVhdGUtY2ZuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLFNBQWdCLFdBQVcsQ0FBQyxNQUFXLEVBQUUsT0FBa0M7SUFDekUsTUFBTSxZQUFZLEdBQVE7UUFDeEIsVUFBVSxDQUFDLFNBQWlCLEVBQUUsSUFBYztZQUMxQyxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3RELENBQUM7UUFFRCxXQUFXLENBQUMsU0FBaUIsRUFBRSxJQUFZO1lBQ3pDLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN6QyxDQUFDO1FBRUQsWUFBWSxDQUFDLEtBQWEsRUFBRSxJQUFjO1lBQ3hDLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3QyxDQUFDO1FBRUQsS0FBSyxDQUFDLFNBQWlCO1lBQ3JCLElBQUksU0FBUyxJQUFJLE9BQU8sRUFBRTtnQkFDeEIsT0FBTyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDM0I7aUJBQU07Z0JBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQkFBcUIsU0FBUyxpQkFBaUIsQ0FBQyxDQUFDO2FBQ2xFO1FBQ0gsQ0FBQztRQUVELFNBQVMsQ0FBQyxRQUFnQixFQUFFLG9CQUFxRDtZQUMvRSxNQUFNLFlBQVksR0FBRyxvQkFBb0I7Z0JBQ3ZDLENBQUMsQ0FBQyxFQUFFLEdBQUcsT0FBTyxFQUFFLEdBQUcsUUFBUSxDQUFDLG9CQUFvQixDQUFDLEVBQUU7Z0JBQ25ELENBQUMsQ0FBQyxPQUFPLENBQUM7WUFFWixPQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBUyxFQUFFLEdBQVcsRUFBRSxFQUFFO2dCQUNqRSxJQUFJLEdBQUcsSUFBSSxZQUFZLEVBQUU7b0JBQ3ZCLE9BQU8sWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUMxQjtxQkFBTTtvQkFDTCxNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFtQixHQUFHLGlCQUFpQixDQUFDLENBQUM7aUJBQzFEO1lBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO0tBQ0YsQ0FBQztJQUVGLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXhCLFNBQVMsUUFBUSxDQUFDLEdBQVE7UUFDeEIsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3RCLE9BQU8sR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUMxQjtRQUVELElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1lBQzNCLE1BQU0sU0FBUyxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN0QyxJQUFJLFNBQVMsRUFBRTtnQkFDYixPQUFPLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQ3JDO1lBRUQsTUFBTSxHQUFHLEdBQTJCLEVBQUUsQ0FBQztZQUN2QyxLQUFLLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ2xDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDL0I7WUFDRCxPQUFPLEdBQUcsQ0FBQztTQUNaO1FBRUQsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRUQsU0FBUyxpQkFBaUIsQ0FBQyxTQUFvQjtRQUM3QyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxJQUFJLFlBQVksQ0FBQyxFQUFFO1lBQ3JDLE1BQU0sSUFBSSxLQUFLLENBQUMsYUFBYSxTQUFTLENBQUMsSUFBSSxxQkFBcUIsQ0FBQyxDQUFDO1NBQ25FO1FBRUQsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXRGLE9BQU8sWUFBWSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7QUFDSCxDQUFDO0FBckVELGtDQXFFQztBQU9ELFNBQVMsY0FBYyxDQUFDLENBQU07SUFDNUIsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLElBQUksQ0FBQyxLQUFLLElBQUksRUFBRTtRQUN2QyxPQUFPLFNBQVMsQ0FBQztLQUNsQjtJQUNELE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUIsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxFQUFFO1FBQzFFLE9BQU87WUFDTCxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNiLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pCLENBQUM7S0FDSDtJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZXZhbHVhdGVDZm4ob2JqZWN0OiBhbnksIGNvbnRleHQ6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0pOiBhbnkge1xuICBjb25zdCBpbnRyaW5zaWNGbnM6IGFueSA9IHtcbiAgICAnRm46OkpvaW4nKHNlcGFyYXRvcjogc3RyaW5nLCBhcmdzOiBzdHJpbmdbXSk6IHN0cmluZyB7XG4gICAgICByZXR1cm4gZXZhbHVhdGUoYXJncykubWFwKGV2YWx1YXRlKS5qb2luKHNlcGFyYXRvcik7XG4gICAgfSxcblxuICAgICdGbjo6U3BsaXQnKHNlcGFyYXRvcjogc3RyaW5nLCBhcmdzOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgcmV0dXJuIGV2YWx1YXRlKGFyZ3MpLnNwbGl0KHNlcGFyYXRvcik7XG4gICAgfSxcblxuICAgICdGbjo6U2VsZWN0JyhpbmRleDogbnVtYmVyLCBhcmdzOiBzdHJpbmdbXSk6IHN0cmluZyB7XG4gICAgICByZXR1cm4gZXZhbHVhdGUoYXJncykubWFwKGV2YWx1YXRlKVtpbmRleF07XG4gICAgfSxcblxuICAgICdSZWYnKGxvZ2ljYWxJZDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgIGlmIChsb2dpY2FsSWQgaW4gY29udGV4dCkge1xuICAgICAgICByZXR1cm4gY29udGV4dFtsb2dpY2FsSWRdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBSZWZlcmVuY2UgdGFyZ2V0ICcke2xvZ2ljYWxJZH0nIHdhcyBub3QgZm91bmRgKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgJ0ZuOjpTdWInKHRlbXBsYXRlOiBzdHJpbmcsIGV4cGxpY2l0UGxhY2Vob2xkZXJzPzogeyBbdmFyaWFibGU6IHN0cmluZ106IHN0cmluZyB9KTogc3RyaW5nIHtcbiAgICAgIGNvbnN0IHBsYWNlaG9sZGVycyA9IGV4cGxpY2l0UGxhY2Vob2xkZXJzXG4gICAgICAgID8geyAuLi5jb250ZXh0LCAuLi5ldmFsdWF0ZShleHBsaWNpdFBsYWNlaG9sZGVycykgfVxuICAgICAgICA6IGNvbnRleHQ7XG5cbiAgICAgIHJldHVybiB0ZW1wbGF0ZS5yZXBsYWNlKC9cXCR7KFtefV0qKX0vZywgKF86IHN0cmluZywga2V5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgaWYgKGtleSBpbiBwbGFjZWhvbGRlcnMpIHtcbiAgICAgICAgICByZXR1cm4gcGxhY2Vob2xkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGbjo6U3ViIHRhcmdldCAnJHtrZXl9JyB3YXMgbm90IGZvdW5kYCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG5cbiAgcmV0dXJuIGV2YWx1YXRlKG9iamVjdCk7XG5cbiAgZnVuY3Rpb24gZXZhbHVhdGUob2JqOiBhbnkpOiBhbnkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgIHJldHVybiBvYmoubWFwKGV2YWx1YXRlKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGNvbnN0IGludHJpbnNpYyA9IHBhcnNlSW50cmluc2ljKG9iaik7XG4gICAgICBpZiAoaW50cmluc2ljKSB7XG4gICAgICAgIHJldHVybiBldmFsdWF0ZUludHJpbnNpYyhpbnRyaW5zaWMpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZXQ6IHsgW2tleTogc3RyaW5nXTogYW55IH0gPSB7fTtcbiAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKG9iaikpIHtcbiAgICAgICAgcmV0W2tleV0gPSBldmFsdWF0ZShvYmpba2V5XSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBmdW5jdGlvbiBldmFsdWF0ZUludHJpbnNpYyhpbnRyaW5zaWM6IEludHJpbnNpYykge1xuICAgIGlmICghKGludHJpbnNpYy5uYW1lIGluIGludHJpbnNpY0ZucykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSW50cmluc2ljICR7aW50cmluc2ljLm5hbWV9IG5vdCBzdXBwb3J0ZWQgaGVyZWApO1xuICAgIH1cblxuICAgIGNvbnN0IGFyZ3NBc0FycmF5ID0gQXJyYXkuaXNBcnJheShpbnRyaW5zaWMuYXJncykgPyBpbnRyaW5zaWMuYXJncyA6IFtpbnRyaW5zaWMuYXJnc107XG5cbiAgICByZXR1cm4gaW50cmluc2ljRm5zW2ludHJpbnNpYy5uYW1lXS5hcHBseShpbnRyaW5zaWNGbnMsIGFyZ3NBc0FycmF5KTtcbiAgfVxufVxuXG5pbnRlcmZhY2UgSW50cmluc2ljIHtcbiAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuICByZWFkb25seSBhcmdzOiBhbnk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlSW50cmluc2ljKHg6IGFueSk6IEludHJpbnNpYyB8IHVuZGVmaW5lZCB7XG4gIGlmICh0eXBlb2YgeCAhPT0gJ29iamVjdCcgfHwgeCA9PT0gbnVsbCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHgpO1xuICBpZiAoa2V5cy5sZW5ndGggPT09IDEgJiYgKGtleXNbMF0uc3RhcnRzV2l0aCgnRm46OicpIHx8IGtleXNbMF0gPT09ICdSZWYnKSkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBrZXlzWzBdLFxuICAgICAgYXJnczogeFtrZXlzWzBdXSxcbiAgICB9O1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG4iXX0=